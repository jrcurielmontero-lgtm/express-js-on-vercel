import fetch from "node-fetch";
import { sendProposalEmail } from "./utilSendProposalEmail.js";

export default async function handler(req, res) {
  console.log("=== WebhookEditProposal_up ejecutado ===");

  // Mostrar formulario si GET
  if (req.method === "GET") {
    const email = req.query.email || "";
    const nombre = req.query.nombre || "";
    const propuesta = req.query.propuesta || "Escribe aqu√≠ tu propuesta actual...";

    const html = `
      <html>
        <head>
          <meta charset="UTF-8">
          <title>Editar Propuesta - Psicoboost</title>
          <style>
            body { font-family: Arial, sans-serif; background:#f8f8f8; padding:20px; }
            .container { background:#fff; max-width:700px; margin:auto; padding:30px; border-radius:12px; box-shadow:0 2px 10px rgba(0,0,0,0.1); }
            textarea { width:100%; height:300px; padding:10px; border:1px solid #ccc; border-radius:6px; font-family:inherit; font-size:15px; }
            button { background:#0984e3; color:#fff; border:none; padding:12px 20px; border-radius:6px; cursor:pointer; font-weight:bold; margin-top:15px; }
            button:hover { background:#74b9ff; }
          </style>
        </head>
        <body>
          <div class="container">
            <h2>Editar Propuesta Comercial</h2>
            <p><strong>Cliente:</strong> ${nombre || "Sin nombre"}</p>
            <form method="POST" action="/api/WebhookEditProposal_up">
              <input type="hidden" name="email" value="${email}">
              <label for="propuesta">Propuesta:</label><br>
              <textarea id="propuesta" name="propuesta">${propuesta}</textarea><br>
              <button type="submit">Enviar propuesta modificada</button>
            </form>
          </div>
        </body>
      </html>
    `;

    return res.status(200).send(html);
  }

  // Procesar env√≠o si POST
  if (req.method === "POST") {
    try {
      // Extraer datos del body del formulario
      let bodyText = "";
      await new Promise((resolve) => {
        req.on("data", (chunk) => (bodyText += chunk));
        req.on("end", resolve);
      });

      const params = new URLSearchParams(bodyText);
      const email = params.get("email");
      const propuesta = params.get("propuesta");

      if (!email || !propuesta) {
        return res.status(400).json({ error: "Faltan par√°metros obligatorios" });
      }

      console.log(`üì© Reenviando propuesta modificada para ${email}`);

      // Simular atributos b√°sicos del contacto
      const attrs = {
        EMAIL: email,
        NOMBRE: email.split("@")[0],
      };

      // Reenviar correo al gestor
      const brevoResponse = await sendProposalEmail({
        attrs,
        propuesta: propuesta,
      });

      return res.status(200).send(`
        <html>
          <body style="font-family:Arial; background:#f8f8f8; padding:40px;">
            <div style="background:#fff; padding:30px; border-radius:12px; text-align:center;">
              <h2>‚úÖ Propuesta actualizada y enviada correctamente</h2>
              <p>El gestor ha recibido la nueva versi√≥n de la propuesta.</p>
              <a href="/" style="display:inline-block; margin-top:20px; text-decoration:none; background:#00b894; color:#fff; padding:10px 20px; border-radius:6px;">Volver</a>
            </div>
          </body>
        </html>
      `);
    } catch (err) {
      console.error("Error al reenviar propuesta:", err);
      return res.status(500).json({ error: "Error reenviando propuesta" });
    }
  }

  return res.status(405).json({ error: "Method Not Allowed" });
}
